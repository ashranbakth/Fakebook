--USERS
INSERT INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENDER)
SELECT DISTINCT CAST(USER_ID AS NUMBER), FIRST_NAME, LAST_NAME, CAST(YEAR_OF_BIRTH AS INTEGER), CAST(MONTH_OF_BIRTH AS INTEGER), CAST(DAY_OF_BIRTH AS INTEGER), GENDER
FROM keykholt.PUBLIC_USER_INFORMATION; 

--FRIENDS
INSERT INTO FRIENDS (USER1_ID, USER2_ID)
SELECT DISTINCT CAST(A.USER1_ID AS NUMBER), CAST(A.USER2_ID AS NUMBER)
FROM keykholt.PUBLIC_ARE_FRIENDS A
WHERE A.USER1_ID < A.USER2_ID
UNION
SELECT DISTINCT CAST(B.USER2_ID AS NUMBER), CAST(B.USER1_ID AS NUMBER)
FROM keykholt.PUBLIC_ARE_FRIENDS B
WHERE B.USER2_ID < B.USER1_ID;

--CITIES
INSERT INTO CITIES (CITY_NAME, STATE_NAME, COUNTRY_NAME)
SELECT DISTINCT CURRENT_CITY, CURRENT_STATE, CURRENT_COUNTRY
FROM keykholt.PUBLIC_USER_INFORMATION
UNION
SELECT DISTINCT HOMETOWN_CITY, HOMETOWN_STATE, HOMETOWN_COUNTRY
FROM keykholt.PUBLIC_USER_INFORMATION; 

--USER_CURRENT_CITY
INSERT INTO USER_CURRENT_CITY (USER_ID, CURRENT_CITY_ID)
SELECT DISTINCT CAST(A.USER_ID AS NUMBER), B.CITY_ID
FROM keykholt.PUBLIC_USER_INFORMATION A, CITIES B
WHERE A.CURRENT_CITY = B.CITY_NAME AND A.CURRENT_STATE = B.STATE_NAME AND A.CURRENT_COUNTRY = B.COUNTRY_NAME;

--USER_HOMETOWN_CITY
INSERT INTO USER_HOMETOWN_CITY (USER_ID, HOMETOWN_CITY_ID)
SELECT DISTINCT CAST(A.USER_ID AS NUMBER), B.CITY_ID
FROM keykholt.PUBLIC_USER_INFORMATION A, CITIES B
WHERE A.HOMETOWN_CITY = B.CITY_NAME AND A.HOMETOWN_STATE = B.STATE_NAME AND A.HOMETOWN_COUNTRY = B.COUNTRY_NAME; 

--PROGRAMS
INSERT INTO PROGRAMS (INSTITUTION, CONCENTRATION, DEGREE)
SELECT DISTINCT INSTITUTION_NAME, CAST(PROGRAM_CONCENTRATION AS VARCHAR2(100)), PROGRAM_DEGREE
FROM keykholt.PUBLIC_USER_INFORMATION
WHERE INSTITUTION_NAME IS NOT NULL AND PROGRAM_CONCENTRATION IS NOT NULL AND PROGRAM_DEGREE IS NOT NULL;


--EDUCATION
INSERT INTO EDUCATION (USER_ID, PROGRAM_ID, PROGRAM_YEAR)
SELECT DISTINCT CAST(A.USER_ID AS NUMBER), B.PROGRAM_ID, CAST(A.PROGRAM_YEAR AS INTEGER)
FROM keykholt.PUBLIC_USER_INFORMATION A, PROGRAMS B
WHERE A.INSTITUTION_NAME = B.INSTITUTION AND A.PROGRAM_CONCENTRATION = B.CONCENTRATION AND A.PROGRAM_DEGREE = B.DEGREE;

--EVENTS
INSERT INTO USER_EVENTS (EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE, EVENT_LOCATION, EVENT_CITY_ID, EVENT_START_TIME, EVENT_END_TIME)
SELECT DISTINCT CAST(A.EVENT_ID AS NUMBER), CAST(A.EVENT_CREATOR_ID AS NUMBER), A.EVENT_NAME, CAST(A.EVENT_TAGLINE AS VARCHAR2(100)), CAST(A.EVENT_DESCRIPTION AS VARCHAR2(100)), A.EVENT_HOST, A.EVENT_TYPE, A.EVENT_SUBTYPE, CAST(A.EVENT_LOCATION AS VARCHAR2(100)), B.CITY_ID, CAST(A.EVENT_START_TIME AS TIMESTAMP), CAST(A.EVENT_END_TIME AS TIMESTAMP)
FROM keykholt.PUBLIC_EVENT_INFORMATION A, CITIES B
WHERE A.EVENT_CITY = B.CITY_NAME AND A.EVENT_STATE = B.STATE_NAME AND A.EVENT_COUNTRY = B.COUNTRY_NAME;

--ALBUMS
INSERT INTO ALBUMS (ALBUM_ID, ALBUM_OWNER_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY, COVER_PHOTO_ID)
SELECT DISTINCT ALBUM_ID, CAST(OWNER_ID AS NUMBER) AS ALBUM_OWNER_ID, ALBUM_NAME, CAST(ALBUM_CREATED_TIME AS TIMESTAMP), CAST(ALBUM_MODIFIED_TIME AS TIMESTAMP), ALBUM_LINK, ALBUM_VISIBILITY, COVER_PHOTO_ID --each album must have a cover photo...
FROM keykholt.PUBLIC_PHOTO_INFORMATION;

--PHOTOS
INSERT INTO PHOTOS (PHOTO_ID, ALBUM_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK)
SELECT DISTINCT (PHOTO_ID), ALBUM_ID, PHOTO_CAPTION, CAST(PHOTO_CREATED_TIME AS TIMESTAMP), CAST(PHOTO_MODIFIED_TIME AS TIMESTAMP), PHOTO_LINK
FROM keykholt.PUBLIC_PHOTO_INFORMATION;

--TAGS
INSERT INTO TAGS (TAG_PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X, TAG_Y)
SELECT DISTINCT PHOTO_ID, CAST(TAG_SUBJECT_ID AS NUMBER), CAST(TAG_CREATED_TIME AS TIMESTAMP), TAG_X_COORDINATE, TAG_Y_COORDINATE
FROM keykholt.PUBLIC_TAG_INFORMATION;

ALTER TABLE ALBUMS
ADD CONSTRAINT ALBUM_CONSTRAINT_II
FOREIGN KEY (COVER_PHOTO_ID)
REFERENCES PHOTOS(PHOTO_ID);

ALTER TABLE PHOTOS
ADD CONSTRAINT PHOTO_CONSTRAINT_II
FOREIGN KEY (ALBUM_ID)
REFERENCES ALBUMS(ALBUM_ID);

